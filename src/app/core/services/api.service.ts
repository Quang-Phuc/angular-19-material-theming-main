import { Injectable, inject } from '@angular/core';
import { HttpClient, HttpErrorResponse, HttpParams } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ApiService {
  private http = inject(HttpClient);

  /**
   * L·∫•y URL API g·ªëc t·ª´ file environment
   */
  private readonly apiUrl = environment.apiUrl;

  /**
   * H√†m GET chung
   * @param endpoint ƒê∆∞·ªùng d·∫´n (v√≠ d·ª•: '/users')
   * @param params C√°c query params (v√≠ d·ª•: { page: 1, limit: 10 })
   */
  get<T>(endpoint: string, params?: HttpParams | { [param: string]: string | string[] }): Observable<T> {
    const url = `${this.apiUrl}${endpoint}`;
    return this.http.get<T>(url, { params }).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * H√†m POST chung
   * @param endpoint ƒê∆∞·ªùng d·∫´n (v√≠ d·ª•: '/auth/register')
   * @param data D·ªØ li·ªáu body
   */
  post<T>(endpoint: string, data: unknown): Observable<T> {
    const url = `${this.apiUrl}${endpoint}`;
    return this.http.post<T>(url, data).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * H√†m PUT chung
   * @param endpoint ƒê∆∞·ªùng d·∫´n (v√≠ d·ª•: '/users/123')
   * @param data D·ªØ li·ªáu body
   */
  put<T>(endpoint: string, data: unknown): Observable<T> {
    const url = `${this.apiUrl}${endpoint}`;
    return this.http.put<T>(url, data).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * H√†m DELETE chung
   * @param endpoint ƒê∆∞·ªùng d·∫´n (v√≠ d·ª•: '/users/123')
   */
  delete<T>(endpoint: string): Observable<T> {
    const url = `${this.apiUrl}${endpoint}`;
    return this.http.delete<T>(url).pipe(
      catchError(this.handleError)
    );
  }

  /**
   * H√†m x·ª≠ l√Ω l·ªói "common" (chung)
   * ƒê√¢y l√† n∆°i duy nh·∫•t x·ª≠ l√Ω l·ªói HTTP
   */
  /**
   * H√†m x·ª≠ l√Ω l·ªói "common" (chung)
   * ƒê√¢y l√† n∆°i duy nh·∫•t x·ª≠ l√Ω l·ªói HTTP
   */
  private handleError(error: HttpErrorResponse) {
    // üî• Gi·ªØ nguy√™n l·ªói g·ªëc ƒë·ªÉ component c√≥ th·ªÉ ƒë·ªçc ƒë∆∞·ª£c JSON t·ª´ BE
    return throwError(() => error);
  }

}
